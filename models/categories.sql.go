// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package models

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
insert into categories (name,url,size) values (?,?,?) returning id, name, url, size, is_completed
`

type CreateCategoryParams struct {
	Name string
	Url  string
	Size int64
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.Name, arg.Url, arg.Size)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Size,
		&i.IsCompleted,
	)
	return i, err
}

const getAllCategories = `-- name: GetAllCategories :many
select id, name, url, size, is_completed from categories
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.Size,
			&i.IsCompleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markCategoryAsComplete = `-- name: MarkCategoryAsComplete :one
update categories set is_completed = 1 where id = ? returning id, name, url, size, is_completed
`

func (q *Queries) MarkCategoryAsComplete(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, markCategoryAsComplete, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Size,
		&i.IsCompleted,
	)
	return i, err
}

const markCategoryAsIncomplete = `-- name: MarkCategoryAsIncomplete :one
update categories set is_completed = 0 where id = ? returning id, name, url, size, is_completed
`

func (q *Queries) MarkCategoryAsIncomplete(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, markCategoryAsIncomplete, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Size,
		&i.IsCompleted,
	)
	return i, err
}

const removeCategory = `-- name: RemoveCategory :exec
delete from categories where id = ?
`

func (q *Queries) RemoveCategory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, removeCategory, id)
	return err
}
