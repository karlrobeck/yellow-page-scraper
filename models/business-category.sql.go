// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: business-category.sql

package models

import (
	"context"
)

const createBusinessInCategory = `-- name: CreateBusinessInCategory :one
insert into business_in_category (category_id,name,url,page) values (?,?,?,?) returning id, category_id, name, url, page
`

type CreateBusinessInCategoryParams struct {
	CategoryID int64
	Name       string
	Url        string
	Page       int64
}

func (q *Queries) CreateBusinessInCategory(ctx context.Context, arg CreateBusinessInCategoryParams) (BusinessInCategory, error) {
	row := q.db.QueryRowContext(ctx, createBusinessInCategory,
		arg.CategoryID,
		arg.Name,
		arg.Url,
		arg.Page,
	)
	var i BusinessInCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Url,
		&i.Page,
	)
	return i, err
}

const getBusinessInCategory = `-- name: GetBusinessInCategory :many
select id, category_id, name, url, page from business_in_category where category_id = (select id from categories where categories.name = ?) and page = ?
`

type GetBusinessInCategoryParams struct {
	Name string
	Page int64
}

func (q *Queries) GetBusinessInCategory(ctx context.Context, arg GetBusinessInCategoryParams) ([]BusinessInCategory, error) {
	rows, err := q.db.QueryContext(ctx, getBusinessInCategory, arg.Name, arg.Page)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BusinessInCategory
	for rows.Next() {
		var i BusinessInCategory
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Url,
			&i.Page,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
